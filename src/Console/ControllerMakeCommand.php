<?php

namespace HW798\Console;

use Illuminate\Support\Str;
use InvalidArgumentException;
use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputOption;
use Illuminate\Support\Facades\View;

use Hw798\Support\Table;

class ControllerMakeCommand extends GeneratorCommand
{
    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'hw798:make:controller';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new controller class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Controller';

    protected $index;

    protected $columns;

    protected $config = [];

    public function handle()
    {

        $name = $this->qualifyClass($this->getNameInput());

        $path = $this->getPath($name);

        $this->makeDirectory($path);

        //return parent::handle(); // TODO: Change the autogenerated stub

        //
        //$str = view('', compact(''))->render();

        $this->files->put($path, $this->buildClass($name));

        $this->info($this->type.' created successfully.');

    }

    // 获取use model 的字符串
    protected function getUseModels($config)
    {
        $result = '';

        $tables = [];

        $tables[] = $config['name'];

        if (!empty($config['with']['one'])) {
            $tables = array_merge($tables, array_column($config['with']['one'], 'name'));
        }

        if (!empty($config['with']['many'])) {
            $tables = array_merge($tables, array_column($config['with']['many'], 'name'));
        }

        foreach ($tables as $v) {
            $result .= 'use ' . $this->getDefaultNamespace() . ucwords($config['table']) . ' as ' . ucwords($config['table']) . "Model;\n";
        }

        return $result;
    }

    protected function getSwaggerParams($config)
    {
        $result = '';

        $tables = [];

        $tables[] = $config['name'];

        if (!empty($config['with']['one'])) {
            $tables = array_merge($tables, array_column($config['with']['one'], 'name'));
        }

        if (!empty($config['with']['many'])) {
            $tables = array_merge($tables, array_column($config['with']['many'], 'name'));
        }

        foreach ($tables as $v) {
            $columns = swagger_params_by_columns(Table::showColumns($v));
            $result = array_merge($columns, $result);
        }

        return $result;
    }

    protected function getQueryIndexRules($table, $config)
    {
        $rules = [];

        $index = Table::showIndex($table);

        foreach ($index as $i) {
            $rules[] = $this->getRulesByTable($i->Column_name, $config);
        }

        return $rules;
    }

    protected function getQueryRules($config)
    {
        $rules = [];

        $tables = [];

        $tables[] = $config['name'];

        if (!empty($config['with']['one'])) {
            $tables = array_merge($tables, array_column($config['with']['one'], 'name'));
        }

        if (!empty($config['with']['many'])) {
            $tables = array_merge($tables, array_column($config['with']['many'], 'name'));
        }

        foreach ($tables as $v) {

            foreach (Table::showColumns($v) as $column) {
                $columns = $this->getRulesByTable($column, $config['validator']);
            }

            $rules = array_merge($columns, $rules);
        }

        return $rules;

    }


    protected function getRulesByTable($table, $config)
    {
        $rules = [];

        $columns = Table::showColumns($table);

        foreach ($columns as $k => $v) {

            if ($k == 0) {
                continue;
            }

            if(is_null($v->Default)) {
                $rules[$v->Field][] =  'required';
            }

            if(!empty($v->config['validator'][$v->Type])) {
                $rules[$v->Field][] =  $config[$v->Type];
            }

        }

        return $rules;
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {




        // 通用模块
            // 获取sql结果集
                // 根据is null 分析 query 验证
                // 根据 字段类型 分析 query 验证 【用laravel的原生写法,或者自己封装一套类似 $this->par】

            // 获取索引信息
                //根据index分析 where 【必须是 master表, 其他表不考虑】


        // 控制器
            // 增删改查
            // getQuery()
                // helper里面写一个  封装的参数验证问题


        // 遍历进行写service 增删改查 、 分页列表


        // 疑问: 使用配置、还是使用命令行直接搞定with的问题,或者从表上能看出来






        if ($this->option('parent')) {
            return __DIR__.'/stubs/controller.nested.stub';
        } elseif ($this->option('model')) {
            return __DIR__.'/stubs/controller.model.stub';
        } elseif ($this->option('resource')) {
            return __DIR__.'/stubs/controller.stub';
        }

        return __DIR__.'/stubs/controller.plain.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Http\Controllers';
    }

    /**
     * Build the class with the given name.
     *
     * Remove the base controller import if we are already in base namespace.
     *
     * @param  string  $name
     * @return string
     */
    protected function buildClass($name)
    {
        $controllerNamespace = $this->getNamespace($name);

        $replace = [];

        if ($this->option('parent')) {
            $replace = $this->buildParentReplacements();
        }

        if ($this->option('model')) {
            $replace = $this->buildModelReplacements($replace);
        }

        $replace["use {$controllerNamespace}\Controller;\n"] = '';

        return str_replace(
            array_keys($replace), array_values($replace), parent::buildClass($name)
        );
    }

    /**
     * Build the replacements for a parent controller.
     *
     * @return array
     */
    protected function buildParentReplacements()
    {
        $parentModelClass = $this->parseModel($this->option('parent'));

        if (! class_exists($parentModelClass)) {
            if ($this->confirm("A {$parentModelClass} model does not exist. Do you want to generate it?", true)) {
                $this->call('make:model', ['name' => $parentModelClass]);
            }
        }

        return [
            'ParentDummyFullModelClass' => $parentModelClass,
            'ParentDummyModelClass' => class_basename($parentModelClass),
            'ParentDummyModelVariable' => lcfirst(class_basename($parentModelClass)),
        ];
    }

    /**
     * Build the model replacement values.
     *
     * @param  array  $replace
     * @return array
     */
    protected function buildModelReplacements(array $replace)
    {
        $modelClass = $this->parseModel($this->option('model'));

        if (! class_exists($modelClass)) {
            if ($this->confirm("A {$modelClass} model does not exist. Do you want to generate it?", true)) {
                $this->call('make:model', ['name' => $modelClass]);
            }
        }

        return array_merge($replace, [
            'DummyFullModelClass' => $modelClass,
            'DummyModelClass' => class_basename($modelClass),
            'DummyModelVariable' => lcfirst(class_basename($modelClass)),
        ]);
    }

    /**
     * Get the fully-qualified model class name.
     *
     * @param  string  $model
     * @return string
     */
    protected function parseModel($model)
    {
        if (preg_match('([^A-Za-z0-9_/\\\\])', $model)) {
            throw new InvalidArgumentException('Model name contains invalid characters.');
        }

        $model = trim(str_replace('/', '\\', $model), '\\');

        if (! Str::startsWith($model, $rootNamespace = $this->laravel->getNamespace())) {
            $model = $rootNamespace.$model;
        }

        return $model;
    }

    /**
     * Get the console command options.
     *
     * @return array
     */
    protected function getOptions()
    {
        return [
            ['model', 'm', InputOption::VALUE_OPTIONAL, 'Generate a resource controller for the given model.'],

            ['resource', 'r', InputOption::VALUE_NONE, 'Generate a resource controller class.'],

            ['parent', 'p', InputOption::VALUE_OPTIONAL, 'Generate a nested resource controller class.'],
        ];
    }
}
